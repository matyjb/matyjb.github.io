{"version":3,"sources":["App.js","serviceWorker.js","index.js","contexts/GlobalContext.tsx"],"names":["LoadableNav","Loadable","loader","Promise","all","__webpack_require__","e","then","bind","loading","react_default","a","createElement","LoadableHomePage","LoadableTicTacToePage","App","state","isDrawerOpen","open","this","setState","GlobalContext","react_router_dom","react_router","component","exact","path","Component","withStyles","avatar","margin","border","borderColor","top","&:hover","cursor","drawer","width","flexShrink","drawerPaper","drawerHeader","display","alignItems","padding","justifyContent","Boolean","window","location","hostname","match","Array","from","document","getElementsByTagName","forEach","element","style","getElementById","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister","createContext","count","fbContent","isLoggedIn","userID","first_name","email","picture","GlobalContextProvider","_Component","_getPrototypeOf2","_this","Object","C_Github_PWI_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","_len","arguments","length","args","_key","C_Github_PWI_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","C_Github_PWI_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","apply","concat","setFbContent","value","clearFbContent","incrementCount","C_Github_PWI_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_4__","C_Github_PWI_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__","key","react__WEBPACK_IMPORTED_MODULE_5___default","Provider","props","children"],"mappings":"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","file":"static/js/main.57380bf8.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport {GlobalContextProvider} from './contexts/GlobalContext';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n// import { IndexRoute,  } from 'react-router';\n// import HomePage from './pages/HomePage/HomePage';\nimport { withStyles } from '@material-ui/core';\n// import Nav from './pages/Nav';\n// import TicTacToePage from './pages/TicTacToePage/TicTacToePage';\n\nimport Loadable from 'react-loadable';\n\nconst styles = {\n  avatar: {\n    margin: \"2px 10px\",\n    border: \"3px solid\",\n    borderColor: \"#5c6bc0\",\n    top: 5,\n    \"&:hover\": {\n      borderColor: \"#7986cb\",\n      cursor: \"pointer\"\n    }\n  },\n  drawer: {\n    width: 240,\n    flexShrink: 0,\n  },\n  drawerPaper: {\n    width: 240,\n  },\n  drawerHeader: {\n    display: 'flex',\n    alignItems: 'center',\n    padding: '0 8px',\n    justifyContent: 'flex-end',\n  },\n}\n\nconst LoadableNav = Loadable({\n  loader: () => import('./pages/Nav'),\n  loading() {\n    return <div></div>\n  }\n});\nconst LoadableHomePage = Loadable({\n  loader: () => import('./pages/HomePage/HomePage'),\n  loading() {\n    return <div></div>\n  }\n});\nconst LoadableTicTacToePage = Loadable({\n  loader: () => import('./pages/TicTacToePage/TicTacToePage'),\n  loading() {\n    return <div></div>\n  }\n});\nclass App extends Component{\n  state = {\n      isDrawerOpen: false, \n  }\n\n  toggleDrawer(open) {\n    this.setState({isDrawerOpen: open});\n  }\n\n  render() {\n    return (\n      <GlobalContextProvider>\n        <Router>\n          <Route component={LoadableNav}/>\n          <Switch>\n            <Route exact path=\"/\" component={LoadableHomePage}/>\n            <Route path=\"/tictactoe\" exact component={LoadableTicTacToePage} />\n          </Switch>\n        </Router>\n      </GlobalContextProvider>\n    );\n  }\n}\n\nexport default withStyles(styles)(App);\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nArray.from(document.getElementsByTagName(\"div\")).forEach(element => {\n  element.style.display=\"none\";\n});\ndocument.getElementById(\"root\").style.display = \"block\";\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createContext } from \"react\";\r\nimport React, { Component } from 'react'\r\n\r\n\r\nconst GlobalContext = createContext({count: 0,\r\n  fbContent: {\r\n    isLoggedIn: false,\r\n    userID: \"\",\r\n    first_name: \"\",\r\n    email: \"\",\r\n    picture: \"\"\r\n  }});\r\n\r\nexport class GlobalContextProvider extends Component {\r\n  state = {\r\n    count: 0,\r\n    fbContent: {\r\n      isLoggedIn: false,\r\n      userID: \"\",\r\n      first_name: \"\",\r\n      email: \"\",\r\n      picture: \"\"\r\n    },\r\n    setFbContent: (value: any) => {return this.setState({fbContent: value})},\r\n    clearFbContent: () => {return this.setState({fbContent: {\r\n      isLoggedIn: false,\r\n      userID: \"\",\r\n      first_name: \"\",\r\n      email: \"\",\r\n      picture: \"\"\r\n    }})},\r\n    incrementCount: () => {\r\n      return this.setState({count: this.state.count + 1});\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <GlobalContext.Provider value={this.state}>\r\n        {this.props.children}\r\n      </GlobalContext.Provider>\r\n    )\r\n  }\r\n}\r\n\r\nexport default GlobalContext;"],"sourceRoot":""}